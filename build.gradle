plugins {
  id 'java'
  id 'jacoco'
}

group = 'web.backend'
version = '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.9.2'
  seleniumVersion = '4.31.0'
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom testRuntimeOnly
}

def srcDir = file('src/main/java')
def outputDir = file('build/classes/main')
def warFile = file("./build/libs/lab4-1.0-SNAPSHOT.war")
def wildflyPath = file('/home/grigory/itmo/web/wildfly-34.0.0.Final')
def javaPath = "/usr/lib/jvm/java-17-openjdk-amd64"

// ############################################
// ============== My Build tasks ==============
// ############################################

tasks.register('myCompile') {
  description 'Компиляция'
  group 'My Build tasks'

  doLast {
    if (!srcDir.exists()) {
      throw new GradleException("Исходная директория не найдена: ${srcDir}")
    }

    outputDir.mkdirs()

    def javaFiles = fileTree(srcDir).include('**/*.java').files.toList()
    if (javaFiles.isEmpty()) {
      println "Нет Java-файлов для компиляции"
      return
    }

    def classpath = configurations.compileClasspath.asPath
    def javacPath = "${javaPath}/bin/javac"
    def lombokPath = configurations.annotationProcessor.find { it.name.startsWith("lombok") }?.absolutePath

    if (!lombokPath) {
      throw new GradleException("Lombok не найден в annotationProcessor!")
    }

    def cmd = [javacPath,
               "-d", outputDir.absolutePath,
               "--release", "17",
               "-sourcepath", srcDir.absolutePath,
               "-processorpath", lombokPath,
               "-cp", classpath]

    javaFiles.each { file ->
      cmd.add(file.absolutePath)
    }

    println "Выполняем компиляцию с командой: ${cmd.join(' ')}"

    exec {
      commandLine cmd
    }

    println "Компиляция успешно завершена!"
  }
}

tasks.register('buildJar') {
  description 'Сборка JAR-архива'
  group 'My Build tasks'

  dependsOn myCompile

  def resourcesDir = file('src/main/resources')
  def jarFile = file('build/libs/app.jar')
  def classesDir = file('build/classes/main')
  def manifest = file('build/tmp/jar/MANIFEST.MF')

  doLast {
    manifest.parentFile.mkdirs()
    jarFile.parentFile.mkdirs()

    manifest.text = """Manifest-Version: 1.0
Main-Class: web.backend.lab4.Main

"""

    copy {
      from resourcesDir
      into classesDir
    }

    println manifest.absolutePath
    exec {
      commandLine 'jar', 'cmf',
              manifest.absolutePath,
              jarFile.absolutePath,
              '-C', classesDir, '.'
    }

    copy {
      from configurations.runtimeClasspath
      into file('build/libs/lib')
    }

    println "JAR-архив успешно собран: ${jarFile.absolutePath}"
    println "Зависимости скопированы в build/libs/lib/"
  }
}

tasks.register('buildWar') {
  description 'Сборка WAR-архива'
  group 'My Build tasks'

  dependsOn myCompile

  def classesDir = file('build/classes/main')
  def webInfDir = file('build/tmp/war/WEB-INF')

  doLast {
    warFile.parentFile.mkdirs()
    webInfDir.mkdirs()

    // Классы
    def webInfClasses = file("$webInfDir/classes")
    webInfClasses.mkdirs()
    copy {
      from classesDir
      into webInfClasses
    }

    // Ресурсы
    def resourcesDir = file('src/main/resources/')
    copy {
      from resourcesDir
      into webInfClasses
    }

    // Зависимости
    def webInfLib = file("$webInfDir/lib")
    webInfLib.mkdirs()
    copy {
      from configurations.runtimeClasspath
      into webInfLib
    }

    exec {
      workingDir warFile.parentFile
      commandLine 'jar', 'cf',
              warFile.absolutePath,
              '-C', webInfDir.parentFile, 'WEB-INF',
              '.'
    }

    println "WAR-архив успешно собран: ${warFile.absolutePath}"

  }
}

tasks.register('myBuild') {
  description 'Cборка приложения'
  dependsOn myCompile, buildJar, buildWar
  group 'My Build tasks'
}

tasks.register('myClean') {
  description 'Удаление директории "build"'
  group 'My Build tasks'

  doLast {
    def buildDir = file("./build")
    buildDir.deleteDir()
    println 'Директория build/ удалена'
  }
}

// ###############################################
// ================ Wildfly tasks ================
// ###############################################

tasks.register('startWildfly') {
  description 'Запуск Wildfly'
  group 'wildfly'

  doLast {

    def buf = new ByteArrayOutputStream()
    exec {
      workingDir wildflyPath
      commandLine './bin/jboss-cli.sh', '--connect', '--command=:read-attribute(name=server-state)'
      standardOutput buf
      ignoreExitValue true
    }
    if (buf.toString().contains('"result" => "running"')) {
      println "WildFly уже запущен"
      return
    }

    println "Запуск Wildfly..."
    exec {
      workingDir wildflyPath
      commandLine 'sh', '-c', "./bin/standalone.sh > server.log 2>&1 &"
      ignoreExitValue true
    }

    println "Проверка состояния..."
    def attempts = 0
    def isRunning = false
    while (attempts < 10 && !isRunning){
      buf.reset()
      exec {
        workingDir wildflyPath
        commandLine './bin/jboss-cli.sh', '--connect', '--command=:read-attribute(name=server-state)'
        standardOutput buf
        ignoreExitValue true
      }
      if (buf.toString().contains('"result" => "running"')) {
        isRunning = true
      } else {
        Thread.sleep(2000)
      }
    }
    if (!isRunning) {
      throw new GradleException("Не удалось запустить Wildfly")
    }
    println "Wildfly запущен"
  }
}

tasks.register('stopWildfly') {
  description 'Остановка Wildfly'
  group 'wildfly'

  doLast {
    def cmd = ["${wildflyPath}/bin/jboss-cli.sh", "--connect", "--command=:shutdown"]
    def buf = new ByteArrayOutputStream()
    exec {
      commandLine cmd
      standardOutput buf
      ignoreExitValue true
    }
    if (!buf.toString().contains('"outcome" => "success"')){
      throw new GradleException("Не удалось остановить Wildfly")
    }
    println "Wildfly остановлен"
  }
}

tasks.register('undeploy', Exec) {
  description 'Удаление war-архива из Wildfly'
  group 'wildfly'

  commandLine wildflyPath.absolutePath + '/bin/jboss-cli.sh',
              '--connect', "--command=undeploy ${warFile.name}"
  ignoreExitValue true
}

tasks.register('deploy') {
  dependsOn buildWar, startWildfly
  description 'Деплой war-архива на Wildfly'
  group 'wildfly'

  doLast {
    def deploymentName = warFile.name

    // проверка
    def buf = new ByteArrayOutputStream()
    exec {
      commandLine "${wildflyPath.absolutePath}/bin/jboss-cli.sh",
              "--connect",
              "--command=/deployment=${deploymentName}:read-resource"
      standardOutput = buf
      errorOutput = new ByteArrayOutputStream()
      ignoreExitValue true
    }
    if (buf.toString().contains('"outcome" => "success"')) {
      println "Приложение уже развернуто"
      return
    }

    // деплой
    exec {
      commandLine "${wildflyPath}/bin/jboss-cli.sh",
              "--connect",
              "--command=deploy ${warFile.absolutePath}"
    }

    // проверка деплоя
    buf.reset()
    exec {
      commandLine "${wildflyPath}/bin/jboss-cli.sh",
              "--connect",
              "--command=/deployment=${deploymentName}:read-attribute(name=status)"
      standardOutput = buf
    }
    if (!buf.toString().contains('"result" => "OK"')) {
      throw new GradleException("Ошибка развертывания!")
    }
  }
}

// ########################################
// ============== Func tests ==============
// ########################################

sourceSets {
  functionalTest {
    java.srcDir file('src/functionalTest/java')
    resources.srcDir file('src/functionalTest/resources')
    compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
    runtimeClasspath += output + compileClasspath
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register('functionalTest', Test) {
  dependsOn deploy

  description = 'Runs the functional tests.'
  group = 'verification'
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath

}


//def functionalTestSrcDir = file('src/test/java/functionalTest')
//def functionalClassesDir = file("build/classes/java/test")
//
//tasks.register('compileFunctionalTest', Exec) {
//  description = "Компиляция функциональных тестов"
//  group = "Functional tests"
//
//  def classpath = configurations.functionalTestImplementation.asPath
//
//  def srcFiles = fileTree(functionalTestSrcDir).filter { it.isFile() }.files
//
//  commandLine = [
//          'javac',
//          '-d', functionalClassesDir.absolutePath,
//          '-cp', classpath,
//          *srcFiles.collect { it.absolutePath }
//  ]
//}
//
//tasks.register('runFunctionalTest') {
//  description = "Запуск функциональных тестов"
//  group = "Functional tests"
//
//  dependsOn compileFunctionalTest
//
//  doLast {
//
//    def classpath = files(
//            functionalClassesDir,
//            configurations.functionalTestRuntimeOnly,
//            configurations.functionalTestImplementation
//    ).asPath
//
//    def cmd = [
//            "java",
//            "-cp", classpath,
//            "org.junit.platform.console.ConsoleLauncher",
//            "--scan-class-path", functionalClassesDir,
//            "--details", "tree",
//            "--details-theme", "ascii",
//    ]
//
//    def res = exec {
//      commandLine cmd as List<String>
//      ignoreExitValue = true
//    }
//
//
//    println "Функциональные тесты выполнены"
//  }
//}


// =========== Unit tests ===========
jacoco {
  toolVersion = "0.8.11"
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

functionalTest {
  useJUnitPlatform()
}

jacocoTestReport {
  dependsOn test
  reports {
    html.required = true
  }
}


dependencies {
  implementation 'jakarta.platform:jakarta.jakartaee-api:10.0.0'
  implementation 'org.hibernate.orm:hibernate-core:6.3.1.Final'
  implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.3'
  implementation 'com.auth0:java-jwt:4.4.0'
  implementation 'ch.qos.logback:logback-classic:1.5.13'
  implementation 'at.favre.lib:bcrypt:0.10.2'
  implementation 'org.apache.commons:commons-lang3:3.14.0'
  implementation 'com.fasterxml.jackson.core:jackson-core:2.18.2'
  implementation 'com.fasterxml.jackson.core:jackson-annotations:2.18.2'
  implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.18.2'

  compileOnly 'org.projectlombok:lombok:1.18.30'
  annotationProcessor 'org.projectlombok:lombok:1.18.30'

  // для unit тестов
  testImplementation 'org.jboss.resteasy:resteasy-client:6.2.12.Final'
  testImplementation 'org.jboss.resteasy:resteasy-core-spi:6.2.12.Final'
  testImplementation 'org.jboss.resteasy:resteasy-core:6.2.12.Final'

  testImplementation 'org.mockito:mockito-core:5.3.1'
  testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
  testImplementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'

  testCompileOnly 'org.projectlombok:lombok:1.18.30'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

  implementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

  testRuntimeOnly "org.junit.platform:junit-platform-console-standalone:1.9.2"
  testImplementation "org.apiguardian:apiguardian-api:1.1.2"
  testImplementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
}
